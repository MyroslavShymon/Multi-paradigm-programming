/* 1) Підключення пакета для χ²-розподілу */
load("distrib")$    /* для функції quantile_chi2(p, df) */

/* Повністю виправлений Maxima-код для побудови лінгвістичного ланцюжка */
toLinguisticChain():=
block(
  [mode, n, rand_limit, m, df,
   series, sorted_series,
   raw_q, raw_bounds,
   data_norm, chi_vals,
   alphabet, letters, chain,
   i, j, prev, intervals,
   letter_counts, sorted_chain,
   mat],

  /* 2) Запит режиму зчитування даних:
        – CSV    → зчитування з файлу .csv
        – manual → ручне введення користувачем
        – random → генерація випадкових чисел */
  print("Чи зчитувати дані з CSV? (так/ні):"), mode: read(),
  if mode = 'так or mode = 'yes then (
    /* 2.1) Зчитування даних із CSV:
          – запит кількості значень (max 1000)
          – зчитування матриці, формування списку зі стовпця Price */
    print("Скільки значень з колонки Price зчитати (макс 1000)?"), 
    n: read(), 
    if n > 1000 then n: 1000,
    data_mat: read_matrix(
      "D:/Documents/KPI/Reports/semester_6/Multiparadigm_programming/Lab6/data.csv",
      1, false, true
    ),
    series: makelist(data_mat[i][1], i, 1, min(length(data_mat), n)),
    series: sublist(series, numberp)
  ) else (
    /* 2.2) Режим ручного або випадкового вводу */
    print("Введіть режим (manual/random):"), mode: read(),
    if not (mode = 'manual or mode = 'random) then (
      print("Невірний режим!"), return()
    ),
    print("Введіть n (кількість елементів):"), n: read(),
    if mode = 'manual then (
      /* ручне введення n значень */
      series: makelist(
        block([x],
          print(sconcat("Value #", i, ": ")), 
          x: read(), 
          x
        ),
        i, 1, n
      )
    ) else (
      /* генерація n випадкових значень */
      print("Введіть верхню межу для random (0..N-1):"), rand_limit: read(),
      series: makelist(1 + random(rand_limit), i, 1, n),
      for i:1 thru n do 
        print(sconcat("Rnd[", i, "] = ", series[i]))
    )
  ),

  /* 3) Введення параметрів алгоритму:
        – m  : розмір алфавіту (кількість інтервалів)
        – df : ступінь свободи χ² */
  print("Введіть розмір алфавіту m:"), m: truncate(read()),
  print("Введіть ступінь свободи χ² (df):"), df: read(),
  if m < 1 or m > 26 then (
    print("m має бути від 1 до 26"), 
    return()
  ),

  /* 4) Сортування вхідного ряду за зростанням */
  sorted_series: sort(series),
  print("Sorted series: ", sorted_series),

  /* 5) Обчислення «сировинних» χ²-квантілей у χ²-просторі */
  raw_q: makelist(quantile_chi2(i/m, df), i, 1, m-1),
  /* формування меж у χ²-просторі: [0] + raw_q + [Inf] */
  raw_bounds: append([0], append(raw_q, [inf])),

  /* 6) Створення алфавіту символів для ланцюжка */
  alphabet: makelist(ascii(64 + i), i, 1, m),

  /* 7) Нормалізація даних у відрізку [0,1] */
  data_norm: map(
    lambda([x], (x - first(sorted_series)) /
                  (last(sorted_series) - first(sorted_series))),
    series
  ),

  /* 8) Мапінг нормалізованих значень у χ²-простір */
  chi_vals: map(lambda([u], quantile_chi2(u, df)), data_norm),

  /* 9) Вивід інтервалів у χ²-просторі */
  print("Інтервали:"),
  for j:1 thru m do (
    prev: raw_bounds[j],
    up: raw_bounds[j+1],
    print(sconcat(
      "  Інтервал ", j, ": [", float(prev), ", ",
      if up = inf then "Inf" else float(up),
      "]"
    ))
  ),

  /* 10) Побудова лінгвістичного ряду на основі інтервалів */
  letters: [],
  for v in chi_vals do block(
    /* якщо χ² = нескінченність → останній інтервал */
    if v = inf then j: m else (
      j: 1,
      while not (raw_bounds[j] <= v and v < raw_bounds[j+1]) do 
        j: j+1
    ),
    letters: endcons(alphabet[j], letters)
  ),
  print("Лінгвістичний ряд:"),
  chain: apply(sconcat, letters), 
  disp(chain),

  /* 11) Підрахунок частот символів і формування відсортованого ланцюжка */
  letter_counts: makelist(0, i, 1, m),
  for L in letters do (
    idx: first(sublist_indices(alphabet, lambda([c], c = L))),
    letter_counts[idx]: letter_counts[idx] + 1
  ),
  sorted_chain: "",
  for i:1 thru m do (
    if letter_counts[i] > 0 then
      sorted_chain: sconcat(
        sorted_chain,
        apply(sconcat, makelist(alphabet[i], j, 1, letter_counts[i]))
      )
  ),
  print("Відсортований лінгвістичний ряд:"), 
  disp(sorted_chain),

  /* 12) Генерація та вивід матриці передування символів */
  mat: genmatrix(lambda([r,c], 0), m, m),
  for k:1 thru length(letters)-1 do (
    i: first(sublist_indices(alphabet, lambda([c], c = letters[k]))),
    j: first(sublist_indices(alphabet, lambda([c], c = letters[k+1]))),
    mat[i,j]: mat[i,j] + 1
  ),
  print("Матриця передування:"),
  printf(true, "          "),
  for i:1 thru m do printf(true, "~3a ", ascii(64+i)), printf(true, "~%"),
  for i:1 thru m do (
    printf(true, "    ~a:    ", ascii(64+i)),
    for j:1 thru m do printf(true, "~3d ", mat[i,j]),
    printf(true, "~%")
  ),

  /* Завершення роботи функції */
  print("Роботу завершено."), false
);
